version: 2.1
orbs:
  aws-s3: circleci/aws-s3@3.1.1
  browser-tools: circleci/browser-tools@1.4.1
  ruby: circleci/ruby@1.8.0
  node: circleci/node@5.0.2
jobs:
  build:
    parallelism: 1
    docker:
      # this is important to use proper image with browsers support
      - image: cimg/ruby:2.7.2-browsers
        environment:
          PGHOST: 127.0.0.1
          PGUSER: postgres
          RAILS_ENV: test
          PAGER: cat # https://stackoverflow.com/a/53055116
      - image: cimg/postgres:14.2
        environment:
          POSTGRES_DB: oxford_hub_phone_links_test
          POSTGRES_PASSWORD: ""
          POSTGRES_USER: postgres
      - image: redis:3.2.7
    steps:
      - browser-tools/install-chrome
      - browser-tools/install-chromedriver
      - run:
          command: |
            google-chrome --version
            chromedriver --version
          name: Check install

      - checkout

      # Restore bundle cache
      - restore_cache:
          keys:
            - gem-cache-v2-{{ checksum "Gemfile.lock" }}
            - gem-cache-v2-

      # - run: bundle clean --force # see https://circleci.com/docs/2.0/caching/#bundler-ruby

      # Bundle install dependencies
      - run: bundle install --path vendor/bundle

      # Store bundle cache
      - save_cache:
          key: gem-cache-v2-{{ checksum "Gemfile.lock" }}
          paths:
            - vendor/bundle

      - node/install-packages:
          cache-path: ~/yarn.lock
          pkg-manager: yarn

      # Get psql
      - run: sudo apt-get update && sudo apt install -y postgresql-client
      - run: which psql

      - run:
          name: Wait for DB
          command: dockerize -wait tcp://localhost:5432 -timeout 1m

      # Database setup
      - run:
          name: Database setup
          command: bin/rails db:structure:load --trace

      - run:
          name: Zeitwerk check
          command: bin/rails zeitwerk:check

      - ruby/rspec-test:
          include: spec/**/*_spec.rb

      # Save artifacts
      - store_artifacts:
          path: ./tmp/screenshots

      # - store_artifacts:
      #     path: coverage

      # - when:
      #     condition:
      #       equal: [master, << pipeline.git.branch >>]
      #     steps:
      #       - run: cp coverage/coverage_badge_total.svg coverage/carers_coverage_badge_total.svg
      #       - aws-s3/copy:
      #           from: coverage/carers_coverage_badge_total.svg
      #           to: s3://simplecov-badges
